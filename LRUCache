class LRUCache:

    def __init__(self, capacity: int):
        self.cache={}
        self.capacity=capacity
        self.queue=[]
        self.set=set()

    def get(self, key: int) -> int:
        try:
            res=self.cache[key]
            # self.queue.pop(0)
            if key in self.set:
                self.queue.remove(key)
            self.queue.append(key)
            return res
        except:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.set:
            self.queue.remove(key)
        else:
            if len(self.cache)==self.capacity:
                k=self.queue.pop(0)
                # print(self.cache)
                self.cache.pop(k)
                self.set.remove(k)
            self.set.add(key)
        
        self.queue.append(key)
        self.cache[key]=value


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
