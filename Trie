class TrieNode:
    
    def __init__(self):
        self.links={}
        self.isEnd=False
        


class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=TrieNode()

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        node=self.root
        for ch in word:
            if ch not in node.links:
                newNode= TrieNode()
                node.links[ch]=newNode
            node=node.links[ch]
        node.isEnd=True
        

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        node=self.searchPrefix(word)
        return node!=None and node.isEnd
            
        

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        node=self.searchPrefix(prefix)
        return node!=None
        
    def searchPrefix(self, word: str):
        node=self.root
        for ch in word:
            if ch not in node.links:
                return None
            else:
                node=node.links[ch]
        return node


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
